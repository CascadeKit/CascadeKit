@use "sass:meta";
@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "../libalgo/lib";

@mixin generate_map($map) {
    @each $rule, $value in $map {
        @if meta.type_of($value) == "function" {
            #{$rule}: meta.call($value);
        } @else if lib.is_bound_function($value) {
            #{$rule}: lib.call($value);
        }
        @else {
            #{$rule}: $value;
        }
    }
}

@mixin _generate_list($elements) {
    @each $element in $elements {
        @if meta.type_of($element) == "map" {
            @include generate_map($element);
        } @else if meta.type_of($element) == "list" {
            @include generate_tree($element...);
        } @else {
            @warn "unrecognized input " + $element;
        }
    }
}

@mixin generate_tree($tree...) {
    $first: lib.first($tree);
    @if meta.type_of($first) == "string" {
        $rest: lib.tail($tree);
        @if string.index($first, "@media") {
            @media #{string.slice($first, 7)} {
                @include _generate_list($rest);
            }
        } @else {
            #{$first} {
                @include _generate_list($rest);
            }
        }
        
    } @else {
        @include _generate_list($tree);
    }
}

@function create_block($selector) {
    @return ($selector, );
}

@function insert_rules($block, $rules) {
    @if not is_block($block) {
        @error $block + " is not a valid block";
    }

    @if not is_rule($rules) {
        @error $rules + " is not a set of rules";
    }

    @return list.append($block, $rules);
}

@function insert_block($block, $new) {
    @if not is_block($block) {
        @error $block + " is not a valid block";
    }

    @if not is_block($new) {
        @error $new + " is not a valid block";
    }

    @return list.append($block, $new);
}

@function is_block($tree) {
    @return meta.type_of(lib.first($tree)) == "string";
}

@function is_rule($rule) {
    @return lib.is_map($rule);
}

@function has_rules($list) {
    @return lib.any(is_rule, $list);
}

@function has_inner_block($list) {
    @return lib.any(is_block, $list);
}